name: ARM Template 

on:
  push:
    branches:
      - none
  workflow_dispatch:

jobs:
  # Container_Registry:
  #   runs-on: ubuntu-latest
  #   if: ${{ vars.INFRA_STATUS_CONTAINER_REGISTER == 'YES' }}

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   - name: Container_Registry_Install
  #     run: |
  #       az login --service-principal -u ${{ secrets.SERVICE_PRINCIPAL_ID }} -p ${{ secrets.SERVICE_PRINCIPAL_KEY }} --tenant ${{ secrets.TENANT_ID }}
  #       deploymentName='MyDeployment'
  #       sed -i "s|{{.containerregistryname}}|${{ vars.CONTAINERREGISTER_NAME }}|" Container_Registry.json
  #       sed -i "s|{{.location}}|${{ vars.LOCATION_NAME }}|" Container_Registry.json   
  #       cat Container_Registry.json   
  #       az deployment group create --resource-group ${{ vars.RESOURCEGROUP_NAME }} --name $deploymentName --template-file Container_Registry.json

  # KeyVault:
  #   runs-on: ubuntu-latest
  #   if: ${{ vars.INFRA_STATUS_KEYVAULT == 'YES' }}

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   - name: KeyVault_Install
  #     run: |
  #       az login --service-principal -u ${{ secrets.SERVICE_PRINCIPAL_ID }} -p ${{ secrets.SERVICE_PRINCIPAL_KEY }} --tenant ${{ secrets.TENANT_ID }}
  #       deploymentName='MyDeployment'
  #       sed -i "s|{{.KEYVAULTNAME}}|${{ vars.KEYVAULT_NAME }}|" KeyVault.json
  #       sed -i "s|{{.TENANTID}}|${{ secrets.TENANT_ID }}|" KeyVault.json
  #       sed -i "s|{{.LOCATIONNAME}}|${{ vars.LOCATION_NAME }}|" KeyVault.json
  #       sed -i "s|{{.SUBSCRIPTIONSID}}|${{ secrets.SUBSCRIPTIONS_ID }}|" KeyVault.json
  #       sed -i "s|{{.VNETRESOURCEGROUPNAME}}|${{ vars.VNET_RESOURCEGROUP_NAME }}|" KeyVault.json
  #       sed -i "s|{{.VNETNAME}}|${{ vars.VNET_NAME }}|" KeyVault.json
  #       sed -i "s|{{.SUBNETNAME}}|${{ vars.SUBNET_NAME }}|" KeyVault.json
  #       cat KeyVault.json
  #       az deployment group create --resource-group S2P_GitHub_PoC --name MyDeployment --template-file KeyVault.json
        
  #       echo "Update Private end point"
  #       sed -i "s|{{.KEYVAULTPRIVATEENDPOINTNAME}}|${{ vars.KEYVAULT_PRIVATEENDPOINT_NAME }}|" KeyVaultPrivateEndPoint.json
  #       sed -i "s|{{.LOCATIONNAME}}|${{ vars.LOCATION_NAME }}|" KeyVaultPrivateEndPoint.json
  #       sed -i "s|{{.SUBSCRIPTIONSID}}|${{ secrets.SUBSCRIPTIONS_ID }}|" KeyVaultPrivateEndPoint.json
  #       sed -i "s|{{.RESOURCEGROUPNAME}}|${{ vars.RESOURCEGROUP_NAME }}|" KeyVaultPrivateEndPoint.json
  #       sed -i "s|{{.KEYVAULTNAME}}|${{ vars.KEYVAULT_NAME }}|" KeyVaultPrivateEndPoint.json
  #       sed -i "s|{{.VNETRESOURCEGROUPNAME}}|${{ vars.VNET_RESOURCEGROUP_NAME }}|" KeyVaultPrivateEndPoint.json
  #       sed -i "s|{{.VNETNAME}}|${{ vars.VNET_NAME }}|" KeyVaultPrivateEndPoint.json
  #       sed -i "s|{{.SUBNETNAME}}|${{ vars.SUBNET_NAME }}|" KeyVaultPrivateEndPoint.json
  #       cat KeyVaultPrivateEndPoint.json
  #       az deployment group create --resource-group S2P_GitHub_PoC --name MyDeployment --template-file KeyVaultPrivateEndPoint.json

  # Storage_Accounnt:
  #   runs-on: ubuntu-latest
  #   if: ${{ vars.INFRA_STATUS_STORAGEACCOUNT == 'YES' }}

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   - name: Container_Registry_Install
  #     run: |
  #       az login --service-principal -u ${{ secrets.SERVICE_PRINCIPAL_ID }} -p ${{ secrets.SERVICE_PRINCIPAL_KEY }} --tenant ${{ secrets.TENANT_ID }}
  #       deploymentName='MyDeployment'
  #       sed -i "s|{{.STORAGEACCOUNTNAME}}|${{ vars.STORAGEACCOUNT_NAME }}|" Storage_Account.json
  #       sed -i "s|{{.SUBSCRIPTIONSID}}|${{ secrets.SUBSCRIPTIONS_ID }}|" Storage_Account.json
  #       sed -i "s|{{.VNETRESOURCEGROUPNAME}}|${{ vars.VNET_RESOURCEGROUP_NAME }}|" Storage_Account.json
  #       sed -i "s|{{.VNETNAME}}|${{ vars.VNET_NAME }}|" Storage_Account.json
  #       sed -i "s|{{.SUBNETNAME}}|${{ vars.SUBNET_NAME }}|" Storage_Account.json
  #       sed -i "s|{{.LOCATIONNAME}}|${{ vars.LOCATION_NAME }}|" Storage_Account.json  
  #       cat Storage_Account.json   
  #       az deployment group create --resource-group ${{ vars.RESOURCEGROUP_NAME }} --name $deploymentName --template-file Storage_Account.json  
  # AppServicePlan:
  #   runs-on: ubuntu-latest
  #   if: ${{ vars.INFRA_STATUS_APPSERVICEPLAN == 'YES' }}

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   - name: Container_Registry_Install
  #     run: |
  #       az login --service-principal -u ${{ secrets.SERVICE_PRINCIPAL_ID }} -p ${{ secrets.SERVICE_PRINCIPAL_KEY }} --tenant ${{ secrets.TENANT_ID }}
  #       deploymentName='MyDeployment'
  #       sed -i "s|{{.SERVICEPLANNAME}}|${{ vars.SERVICEPLAN_NAME }}|" App_Service_Plan.json
  #       sed -i "s|{{.LOCATIONNAME}}|${{ vars.LOCATION_NAME }}|" App_Service_Plan.json
  #       sed -i "s|{{.SPSIZENAME}}|${{ vars.SPSIZE_NAME}}|" App_Service_Plan.json 
  #       cat App_Service_Plan.json  
  #       az deployment group create --resource-group ${{ vars.RESOURCEGROUP_NAME }} --name $deploymentName --template-file App_Service_Plan.json 
  # UIWebApp:
  #   runs-on: ubuntu-latest
  #   if: ${{ vars.INFRA_STATUS_UIWEBAPP == 'YES' }}

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   - name: Container_Registry_Install
  #     run: |
  #       az login --service-principal -u ${{ secrets.SERVICE_PRINCIPAL_ID }} -p ${{ secrets.SERVICE_PRINCIPAL_KEY }} --tenant ${{ secrets.TENANT_ID }}
  #       deploymentName='MyDeployment'
  #       sed -i "s|{{.SERVICEPLANNAME}}|${{ vars.SERVICEPLAN_NAME }}|" WebApp_UI.json
  #       sed -i "s|{{.WEBAPPNAME}}|${{ vars.WEBAPP_NAME}}|" WebApp_UI.json
  #       sed -i "s|{{.LOCATIONNAME}}|${{ vars.LOCATION_NAME }}|" WebApp_UI.json
  #       cat WebApp_UI.json
  #       az deployment group create --resource-group ${{ vars.RESOURCEGROUP_NAME }} --name $deploymentName --template-file WebApp_UI.json
  DataEngineWebApp:
    runs-on: ubuntu-latest
    if: ${{ vars.INFRA_STATUS_DATAENGINEWEBAPP == 'YES' }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Container_Registry_Install
      run: |
        az login --service-principal -u ${{ secrets.SERVICE_PRINCIPAL_ID }} -p ${{ secrets.SERVICE_PRINCIPAL_KEY }} --tenant ${{ secrets.TENANT_ID }}
        deploymentName='MyDeployment'
        sed -i "s|{{.SERVICEPLANNAME}}|${{ vars.SERVICEPLAN_NAME }}|" WebApp_Dataengine.json
        sed -i "s|{{.DATAENGINEWEBAPPNAME}}|${{ vars.DATAENGINEWEBAPP_NAME}}|" WebApp_Dataengine.json
        sed -i "s|{{.LOCATIONNAME}}|${{ vars.LOCATION_NAME }}|" WebApp_Dataengine.json
        cat WebApp_Dataengine.json
        az deployment group create --resource-group ${{ vars.RESOURCEGROUP_NAME }} --name $deploymentName --template-file WebApp_Dataengine.json
